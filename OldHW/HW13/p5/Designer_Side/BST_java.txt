public class BST implements BSTADT
{
  // instance variable
  private Node root;

  // constructor
  public BST( )  { root = null; }

  // method
  private boolean hasPathSubTreeEqual(Node localRoot, int sum)
  {  if (localRoot == null)
       return (sum == 0);
     else
     {
       int subSum = sum - localRoot.getKey();
       return (hasPathSubTreeEqual(localRoot.getLeftChild(), subSum) ||
               hasPathSubTreeEqual(localRoot.getRightChild(), subSum));
     }
  }

  public boolean hasPathEqual(int sum)
  {
    if (root == null)
      return false;
    return (hasPathSubTreeEqual(root, sum));
  }

  // methods
  // insert an item i into the binary tree
  public void insert(int i)
  {
    Node newNode = new Node(i, null, null);
    if (root == null)
      root = newNode; // first node of the tree
    else
    {
      Node current = root;
      Node parent;
      while (true)
      {
        parent = current;
        if (current.getKey() > i)
        {   // k < key(current)
            current = current.getLeftChild(); // go left
            if (current == null)
            {
              // insert on left
              parent.setLeftChild(newNode);
              break;
            }
        }
        else
        {
            // k >= key(current)
            current = current.getRightChild(); // go right
            if (current == null)
            {
              // insert on right
              parent.setRightChild(newNode);
              break;  
            }
        }
      } // while
    } // else
  } // method

  private void inOrder(Node localRoot)
  {
    if (localRoot != null)
    {
      inOrder(localRoot.getLeftChild());
      System.out.print(localRoot.getKey() + " ");
      inOrder(localRoot.getRightChild());
    }
  }
  public void traverseInOrder()
  {
     inOrder(root);
     System.out.println();
  }

  private void preOrder(Node localRoot)
  {
    if (localRoot != null)
    {
      System.out.print(localRoot.getKey() + " ");
      preOrder(localRoot.getLeftChild());
      preOrder(localRoot.getRightChild());
    }    
  }
  public void traversePreOrder()
  {
     preOrder(root);
     System.out.println();
  }

  private void postOrder(Node localRoot)
  {
    if (localRoot != null)
    {
      postOrder(localRoot.getLeftChild());
      postOrder(localRoot.getRightChild());
      System.out.print(localRoot.getKey() + " ");
    }
  }
  public void traversePostOrder()
  {
     postOrder(root);
     System.out.println();
  }


}